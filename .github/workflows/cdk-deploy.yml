name: CDK Deploy on AWS

on:
    push:
        branches:
            - main

jobs:
    build:
        runs-on: ubuntu-latest
        environment: Production
        permissions:
            contents: read
            id-token: write
        env:
            APP_NAME: ${{ vars.APP_NAME }}
            ACCOUNT_AWS: ${{ vars.ACCOUNT_AWS }}
            REGION_AWS: ${{ vars.REGION_AWS }}
            DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
            SUBDOMAIN_NAME: ${{ vars.SUBDOMAIN_NAME }}
            EC2_HOST: ${{ vars.EC2_HOST }}
            EC2_ROLE_ARN: ${{ vars.EC2_ROLE_ARN }}
            PREFIX_ROLES_WEB_SERVER: ${{ vars.PREFIX_ROLES_WEB_SERVER }}
            DEVELOPMENT_USER: ${{ secrets.DEVELOPMENT_USER }}
            SPENSIONES_URL_API_BASE: ${{ vars.SPENSIONES_URL_API_BASE }}
            AFP_MODELO_URL_API_BASE: ${{ vars.AFP_MODELO_URL_API_BASE }}
            AFP_MODELO_V2_URL_API_BASE: ${{ vars.AFP_MODELO_V2_URL_API_BASE }}
            AFP_MODELO_V3_URL_API_BASE: ${{ vars.AFP_MODELO_V3_URL_API_BASE }}
            AFP_MODELO_V3_BASE64_KEY: ${{ vars.AFP_MODELO_V3_BASE64_KEY }}
            AFP_MODELO_V3_BASE64_IV: ${{ vars.AFP_MODELO_V3_BASE64_IV }}
            AFP_CUPRUM_URL_API_BASE: ${{ vars.AFP_CUPRUM_URL_API_BASE }}
            AFP_CAPITAL_URL_API_BASE: ${{ vars.AFP_CAPITAL_URL_API_BASE }}
            AFP_HABITAT_URL_API_BASE: ${{ vars.AFP_HABITAT_URL_API_BASE }}
            AFP_PLANVITAL_URL_API_BASE: ${{ vars.AFP_PLANVITAL_URL_API_BASE }}
            AFP_PROVIDA_URL_API_BASE: ${{ vars.AFP_PROVIDA_URL_API_BASE }}
            AFP_UNO_URL_API_BASE: ${{ vars.AFP_UNO_URL_API_BASE }}
            VALORES_UF_URL_API_BASE: ${{ vars.VALORES_UF_URL_API_BASE }}
            COMISIONES_URL_API_BASE: ${{ vars.COMISIONES_URL_API_BASE }}
            COMISIONES_CAV_URL_API_BASE: ${{ vars.COMISIONES_CAV_URL_API_BASE }}
            QUETALMIAFP_EXTRACTION_KEY: ${{ secrets.QUETALMIAFP_EXTRACTION_KEY }}
            QUETALMIAFP_MAX_RETRIES: ${{ vars.QUETALMIAFP_MAX_RETRIES }}
            QUETALMIAFP_MILISEG_FORZAR_TIMEOUT: ${{ vars.QUETALMIAFP_MILISEG_FORZAR_TIMEOUT }}
            MERCADOPAGO_PUBLIC_KEY: ${{ vars.MERCADOPAGO_PUBLIC_KEY }}
            MERCADOPAGO_ACCESS_TOKEN: ${{ secrets.MERCADOPAGO_ACCESS_TOKEN }}
            MERCADOPAGO_URL_SUCCESS: ${{ vars. MERCADOPAGO_URL_SUCCESS}}
            MERCADOPAGO_URL_FAILURE: ${{ vars.MERCADOPAGO_URL_FAILURE }}
            MERCADOPAGO_URL_PENDING: ${{ vars.MERCADOPAGO_URL_PENDING }}
            GOOGLE_RECAPTCHA_CLIENT_KEY: ${{ vars.GOOGLE_RECAPTCHA_CLIENT_KEY }}
            GOOGLE_RECAPTCHA_SECRET_KEY: ${{ secrets.GOOGLE_RECAPTCHA_SECRET_KEY }}
            EMAIL_DIRECCION_NOTIFICACION: ${{ vars.EMAIL_DIRECCION_NOTIFICACION }}
            EMAIL_NOMBRE_NOTIFICACION: ${{ vars.EMAIL_NOMBRE_NOTIFICACION }}
            ARN_PARAMETER_USER_POOL_ID: ${{ vars.ARN_PARAMETER_USER_POOL_ID }}
            ARN_PARAMETER_USER_POOL_CLIENT_ID: ${{ vars.ARN_PARAMETER_USER_POOL_CLIENT_ID }}
            ARN_PARAMETER_COGNITO_REGION: ${{ vars.ARN_PARAMETER_COGNITO_REGION }}
            ARN_PARAMETER_COGNITO_BASE_URL: ${{ vars.ARN_PARAMETER_COGNITO_BASE_URL }}
            ARN_PARAMETER_COGNITO_CALLBACKS: ${{ vars.ARN_PARAMETER_COGNITO_CALLBACKS }}
            ARN_PARAMETER_COGNITO_LOGOUTS: ${{ vars.ARN_PARAMETER_COGNITO_LOGOUTS }}
            ARN_PARAMETER_SES_DIRECCION_DE_DEFECTO: ${{ vars.ARN_PARAMETER_SES_DIRECCION_DE_DEFECTO }}
            ARN_PARAMETER_HERMES_API_URL: ${{ vars.ARN_PARAMETER_HERMES_API_URL }} 
            ARN_PARAMETER_HERMES_API_KEY_ID: ${{ vars.ARN_PARAMETER_HERMES_API_KEY_ID }}
            ARN_PARAMETER_QUETALMIAFP_API_URL: ${{ vars.ARN_PARAMETER_QUETALMIAFP_API_URL }}
            ARN_PARAMETER_QUETALMIAFP_API_KEY_ID: ${{ vars.ARN_PARAMETER_QUETALMIAFP_API_KEY_ID }}
            ARN_PARAMETER_QUETALMIAFP_API_BUCKET_ARN: ${{ vars.ARN_PARAMETER_QUETALMIAFP_API_BUCKET_ARN }}
            ARN_PARAMETER_QUETALMIAFP_API_BUCKET_NAME: ${{ vars.ARN_PARAMETER_QUETALMIAFP_API_BUCKET_NAME }}
                        
        steps:
            - name: Checkout Repositorio
              uses: actions/checkout@v4
      
            - name: Instalar .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ vars.VERSION_DOTNET }}
      
            - name: Instalar Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ vars.VERSION_NODEJS }}
                                                      
            - name: Instalar AWS CDK
              run: npm install -g aws-cdk
              
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
              with:
                  aws-region: ${{ vars.REGION_AWS }}
                  role-to-assume: ${{ vars.ARN_GITHUB_ROLE }}
                
            - name: CDK Synth
              working-directory: ${{ vars.DIRECTORIO_CDK }}
              run: cdk synth
              
            - name: CDK Diff
              working-directory: ${{ vars.DIRECTORIO_CDK }}
              run: cdk --app cdk.out diff
              
            - name: CDK Deploy
              working-directory: ${{ vars.DIRECTORIO_CDK }}
              run: cdk --app cdk.out deploy --require-approval never --no-previous-parameters
                                          
            - name: Publish .NET Application
              run: dotnet publish /p:PublishDir=../publish /p:PublishReadyToRun=true -r linux-arm64 --self-contained true 
              
            - name: Creación appsettings.json
              env:
                  APPSETTINGS: ${{ vars.APPSETTINGS }}
              run: echo "$APPSETTINGS" > ./publish/appsettings.json
              
            - name: Copy files to EC2
              env:
                  EC2_HOST: ${{ vars.EC2_HOST }}
                  EC2_USERNAME: ${{ vars.EC2_USERNAME }}
                  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
                  TEMP_WEBAPP_DIRECTORY: ${{ vars.TEMP_WEBAPP_DIRECTORY }}
                  WEBAPP_DIRECTORY: ${{ vars.WEBAPP_DIRECTORY }}
                  WEBAPP_LOGROTATE: ${{ vars.WEBAPP_LOGROTATE }}
                  WEBAPP_SERVICE: ${{ vars.WEBAPP_SERVICE }}
                  WEBAPP_EXECSTART: ${{ vars.WEBAPP_EXECSTART }}
                  WEBAPP_LOG_DIRECTORY : ${{ vars.WEBAPP_LOG_DIRECTORY }}
                  CLOUDFLARE_CLIENT_CRT: ${{ secrets.CLOUDFLARE_CLIENT_CRT }}
                  CERTBOT_EMAIL: ${{ vars.CERTBOT_EMAIL }}
                  CONFIGURAR_NGINX: ${{ vars.CONFIGURAR_NGINX }}
                  CONFIGURAR_CERTBOT: ${{ vars.CONFIGURAR_CERTBOT }}
              run: |
                echo 'Se añade EC2 Host a Known Hosts'
                mkdir -p ~/.ssh
                ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts
                
                echo 'Se crea archivo SSH Key de EC2'
                echo "$EC2_SSH_KEY" > ssh_key.pem
                chmod 600 ssh_key.pem
                
                echo 'Se crea archivo de CRT Cloudflare'
                echo "$CLOUDFLARE_CLIENT_CRT" > cloudflare.crt
                                
                # Se crean carpetas temporales...
                ssh -i ssh_key.pem $EC2_USERNAME@$EC2_HOST "TEMP_WEBAPP_DIRECTORY=$TEMP_WEBAPP_DIRECTORY" '
                    echo 'Se crean directorios de la carpeta temporal'
                    mkdir -p ~/$TEMP_WEBAPP_DIRECTORY/publish
                    mkdir -p ~/$TEMP_WEBAPP_DIRECTORY/logrotate
                    mkdir -p ~/$TEMP_WEBAPP_DIRECTORY/service
                    mkdir -p ~/$TEMP_WEBAPP_DIRECTORY/conf
                    mkdir -p ~/$TEMP_WEBAPP_DIRECTORY/cloudflare
                '
                
                # Se copian las piezas publicadas en directorio remoto temporal de instancia EC2...
                echo 'Se copian archivos publicados en EC2'
                rsync -azc --no-o --no-g --delete --stats --quiet -e "ssh -i ssh_key.pem" ./publish/ $EC2_USERNAME@$EC2_HOST:~/$TEMP_WEBAPP_DIRECTORY/publish/
                
                # Se copia el archivo logrotate
                echo 'Se copia archivo de logrotate en EC2'
                rsync -azc --no-o --no-g --delete --stats --quiet -e "ssh -i ssh_key.pem" ./$WEBAPP_LOGROTATE $EC2_USERNAME@$EC2_HOST:~/$TEMP_WEBAPP_DIRECTORY/logrotate/
                
                # Se copia el archivo service...
                echo 'Se copia archivo .service en EC2'
                rsync -azc --no-o --no-g --delete --stats --quiet -e "ssh -i ssh_key.pem" ./$WEBAPP_SERVICE.service $EC2_USERNAME@$EC2_HOST:~/$TEMP_WEBAPP_DIRECTORY/service/
                
                # Se copia el archivo de nginx...
                [[ $CONFIGURAR_NGINX == 1 ]] && echo 'Se copia archivo .conf en EC2'
                [[ $CONFIGURAR_NGINX == 1 ]] && rsync -azc --no-o --no-g --delete --stats --quiet -e "ssh -i ssh_key.pem" ./$WEBAPP_SERVICE.conf $EC2_USERNAME@$EC2_HOST:~/$TEMP_WEBAPP_DIRECTORY/conf/
                [[ $CONFIGURAR_NGINX != 1 ]] && echo 'No se copia archivo .conf en EC2'
                
                # Se copia archivo CRT de cloudflare...
                echo 'Se copia archivo cloudflare.crt en EC2'
                rsync -azc --no-o --no-g --delete --stats --quiet -e "ssh -i ssh_key.pem" ./cloudflare.crt $EC2_USERNAME@$EC2_HOST:~/$TEMP_WEBAPP_DIRECTORY/cloudflare/
                                                
                # Se inicializa el web service...
                ssh -i ssh_key.pem $EC2_USERNAME@$EC2_HOST "TEMP_WEBAPP_DIRECTORY=$TEMP_WEBAPP_DIRECTORY WEBAPP_SERVICE=$WEBAPP_SERVICE WEBAPP_DIRECTORY=$WEBAPP_DIRECTORY WEBAPP_EXECSTART=$WEBAPP_EXECSTART WEBAPP_LOG_DIRECTORY=$WEBAPP_LOG_DIRECTORY WEBAPP_LOGROTATE=$WEBAPP_LOGROTATE" '
                    echo 'Se crea carpeta para guardar los logs'
                    sudo mkdir -p $WEBAPP_LOG_DIRECTORY
                    sudo chown -R ec2-user:logreaders $WEBAPP_LOG_DIRECTORY
                    sudo chmod -R 750 $WEBAPP_LOG_DIRECTORY
                    
                    echo 'Se mueve archivo cloudflare.crt'
                    sudo mkdir -p /etc/nginx/certs
                    sudo rsync -az --no-o --no-g --stats --quiet ~/$TEMP_WEBAPP_DIRECTORY/cloudflare/cloudflare.crt /etc/nginx/certs/
                    
                    echo 'Se mueve archivo de logrotate y se gatilla una ejecución'
                    sudo rsync -az --no-o --no-g --stats --quiet ~/$TEMP_WEBAPP_DIRECTORY/logrotate/$WEBAPP_LOGROTATE /etc/logrotate.d/
                    sudo chown root:root /etc/logrotate.d/$WEBAPP_LOGROTATE
                    sudo logrotate -f /etc/logrotate.d/$WEBAPP_LOGROTATE
                    
                    echo 'Se detiene servicio web'
                    sudo systemctl stop $WEBAPP_SERVICE || true  
                    
                    echo 'Se crea directorio de app si no existe'
                    mkdir -p ~/$WEBAPP_DIRECTORY
                            
                    echo 'Se copian archivos desde directorio temporal a directorio de la aplicación web' 
                    sudo rsync -az --no-o --no-g --delete --stats --quiet ~/$TEMP_WEBAPP_DIRECTORY/publish/ ~/$WEBAPP_DIRECTORY/
                                                    
                    echo 'Se mueve archivo .service y se inicia servicio'
                    sudo rsync -az --no-o --no-g --stats --quiet ~/$TEMP_WEBAPP_DIRECTORY/service/$WEBAPP_SERVICE.service /etc/systemd/system/
                    sudo chmod +x ~/$WEBAPP_DIRECTORY/$WEBAPP_EXECSTART
                    sudo systemctl daemon-reload
                    sudo systemctl enable $WEBAPP_SERVICE
                    sudo systemctl restart $WEBAPP_SERVICE
                    sudo systemctl reload nginx
                '
                
                # Se mueve archivo .conf y se reinicia nginx...
                [[ $CONFIGURAR_NGINX == 1 ]] && ssh -i ssh_key.pem $EC2_USERNAME@$EC2_HOST "TEMP_WEBAPP_DIRECTORY=$TEMP_WEBAPP_DIRECTORY WEBAPP_SERVICE=$WEBAPP_SERVICE" '
                    echo 'Se mueve archivo .conf y se reinicia nginx'
                    sudo rsync -az --no-o --no-g --stats --quiet ~/$TEMP_WEBAPP_DIRECTORY/conf/$WEBAPP_SERVICE.conf /etc/nginx/conf.d/
                    sudo systemctl reload nginx
                '
                [[ $CONFIGURAR_NGINX != 1 ]] && echo 'No se mueve archivo .conf ni se reinicia nginx'
                
                # Se configura certificados con certbot...
                [[ $CONFIGURAR_CERTBOT == 1 ]] && ssh -i ssh_key.pem $EC2_USERNAME@$EC2_HOST "SUBDOMAIN_NAME=$SUBDOMAIN_NAME CERTBOT_EMAIL=$CERTBOT_EMAIL" '                   
                    echo 'Se configura certificados con certbot'
                    sudo certbot --nginx -d $SUBDOMAIN_NAME -m $CERTBOT_EMAIL --agree-tos --non-interactive
                    sudo systemctl reload nginx 
                '
                [[ $CONFIGURAR_CERTBOT != 1 ]] && echo 'No se configura certificados con certbot'
                
                echo 'Termina exitosamente el copiado y configuración de la aplicación'